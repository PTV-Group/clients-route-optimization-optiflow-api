/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Restricts how long the driver of the vehicle may drive without taking a break of at least the specified duration.
 */
@ApiModel(description = "Restricts how long the driver of the vehicle may drive without taking a break of at least the specified duration.")
@JsonPropertyOrder({
  DrivingBreakSettings.JSON_PROPERTY_MAXIMUM_DRIVING_DURATION,
  DrivingBreakSettings.JSON_PROPERTY_MINIMUM_BREAK_DURATION
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-23T11:00:47.938367Z[Etc/UTC]")
public class DrivingBreakSettings {
  public static final String JSON_PROPERTY_MAXIMUM_DRIVING_DURATION = "maximumDrivingDuration";
  private Integer maximumDrivingDuration;

  public static final String JSON_PROPERTY_MINIMUM_BREAK_DURATION = "minimumBreakDuration";
  private Integer minimumBreakDuration;

  public DrivingBreakSettings() { 
  }

  public DrivingBreakSettings maximumDrivingDuration(Integer maximumDrivingDuration) {
    this.maximumDrivingDuration = maximumDrivingDuration;
    return this;
  }

   /**
   * Describes how long [s] the driver may drive without taking a break of at least the specified duration.
   * minimum: 0
   * @return maximumDrivingDuration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "16200", required = true, value = "Describes how long [s] the driver may drive without taking a break of at least the specified duration.")
  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaximumDrivingDuration() {
    return maximumDrivingDuration;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_DRIVING_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaximumDrivingDuration(Integer maximumDrivingDuration) {
    this.maximumDrivingDuration = maximumDrivingDuration;
  }


  public DrivingBreakSettings minimumBreakDuration(Integer minimumBreakDuration) {
    this.minimumBreakDuration = minimumBreakDuration;
    return this;
  }

   /**
   * Specifies the duration [s] of a break a driver has to take if they exceed the maximum driving duration.
   * minimum: 0
   * @return minimumBreakDuration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2700", required = true, value = "Specifies the duration [s] of a break a driver has to take if they exceed the maximum driving duration.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_BREAK_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinimumBreakDuration() {
    return minimumBreakDuration;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_BREAK_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinimumBreakDuration(Integer minimumBreakDuration) {
    this.minimumBreakDuration = minimumBreakDuration;
  }


  /**
   * Return true if this DrivingBreakSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrivingBreakSettings drivingBreakSettings = (DrivingBreakSettings) o;
    return Objects.equals(this.maximumDrivingDuration, drivingBreakSettings.maximumDrivingDuration) &&
        Objects.equals(this.minimumBreakDuration, drivingBreakSettings.minimumBreakDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumDrivingDuration, minimumBreakDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrivingBreakSettings {\n");
    sb.append("    maximumDrivingDuration: ").append(toIndentedString(maximumDrivingDuration)).append("\n");
    sb.append("    minimumBreakDuration: ").append(toIndentedString(minimumBreakDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

