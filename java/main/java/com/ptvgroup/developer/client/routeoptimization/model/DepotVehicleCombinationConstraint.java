/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.model.DepotVehicleCombinationConstraintType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A constraint on the combination of depots and vehicles belonging to a certain category.
 */
@ApiModel(description = "A constraint on the combination of depots and vehicles belonging to a certain category.")
@JsonPropertyOrder({
  DepotVehicleCombinationConstraint.JSON_PROPERTY_TYPE,
  DepotVehicleCombinationConstraint.JSON_PROPERTY_DEPOT_CATEGORY,
  DepotVehicleCombinationConstraint.JSON_PROPERTY_VEHICLE_CATEGORY
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-23T11:00:47.938367Z[Etc/UTC]")
public class DepotVehicleCombinationConstraint {
  public static final String JSON_PROPERTY_TYPE = "type";
  private DepotVehicleCombinationConstraintType type;

  public static final String JSON_PROPERTY_DEPOT_CATEGORY = "depotCategory";
  private String depotCategory;

  public static final String JSON_PROPERTY_VEHICLE_CATEGORY = "vehicleCategory";
  private String vehicleCategory;

  public DepotVehicleCombinationConstraint() { 
  }

  public DepotVehicleCombinationConstraint type(DepotVehicleCombinationConstraintType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DepotVehicleCombinationConstraintType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(DepotVehicleCombinationConstraintType type) {
    this.type = type;
  }


  public DepotVehicleCombinationConstraint depotCategory(String depotCategory) {
    this.depotCategory = depotCategory;
    return this;
  }

   /**
   * The category of depots to which the constraint applies. The constraint will be ignored when no depot belongs to this category. 
   * @return depotCategory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NO_LOADING_BAY", required = true, value = "The category of depots to which the constraint applies. The constraint will be ignored when no depot belongs to this category. ")
  @JsonProperty(JSON_PROPERTY_DEPOT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDepotCategory() {
    return depotCategory;
  }


  @JsonProperty(JSON_PROPERTY_DEPOT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDepotCategory(String depotCategory) {
    this.depotCategory = depotCategory;
  }


  public DepotVehicleCombinationConstraint vehicleCategory(String vehicleCategory) {
    this.vehicleCategory = vehicleCategory;
    return this;
  }

   /**
   * The category of vehicles to which the constraint applies. The constraint will be ignored when no vehicle belongs to this category. 
   * @return vehicleCategory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "FORK_LIFT", required = true, value = "The category of vehicles to which the constraint applies. The constraint will be ignored when no vehicle belongs to this category. ")
  @JsonProperty(JSON_PROPERTY_VEHICLE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVehicleCategory() {
    return vehicleCategory;
  }


  @JsonProperty(JSON_PROPERTY_VEHICLE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVehicleCategory(String vehicleCategory) {
    this.vehicleCategory = vehicleCategory;
  }


  /**
   * Return true if this DepotVehicleCombinationConstraint object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepotVehicleCombinationConstraint depotVehicleCombinationConstraint = (DepotVehicleCombinationConstraint) o;
    return Objects.equals(this.type, depotVehicleCombinationConstraint.type) &&
        Objects.equals(this.depotCategory, depotVehicleCombinationConstraint.depotCategory) &&
        Objects.equals(this.vehicleCategory, depotVehicleCombinationConstraint.vehicleCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, depotCategory, vehicleCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepotVehicleCombinationConstraint {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    depotCategory: ").append(toIndentedString(depotCategory)).append("\n");
    sb.append("    vehicleCategory: ").append(toIndentedString(vehicleCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

