/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routeoptimization.model.DrivingBreakSettings;
import com.ptvgroup.developer.client.routeoptimization.model.WorkingBreakSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Specifies when the driver of the vehicle must take a break during the route.
 */
@ApiModel(description = "Specifies when the driver of the vehicle must take a break during the route.")
@JsonPropertyOrder({
  BreakSettings.JSON_PROPERTY_WORKING,
  BreakSettings.JSON_PROPERTY_DRIVING
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-23T11:00:47.938367Z[Etc/UTC]")
public class BreakSettings {
  public static final String JSON_PROPERTY_WORKING = "working";
  private List<WorkingBreakSettings> working = null;

  public static final String JSON_PROPERTY_DRIVING = "driving";
  private List<DrivingBreakSettings> driving = null;

  public BreakSettings() { 
  }

  public BreakSettings working(List<WorkingBreakSettings> working) {
    this.working = working;
    return this;
  }

  public BreakSettings addWorkingItem(WorkingBreakSettings workingItem) {
    if (this.working == null) {
      this.working = new ArrayList<>();
    }
    this.working.add(workingItem);
    return this;
  }

   /**
   * A list of restrictions that specify how long the driver of the vehicle may work without taking a break. All the time spent during a route is considered working time except for waiting time and break time. 
   * @return working
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of restrictions that specify how long the driver of the vehicle may work without taking a break. All the time spent during a route is considered working time except for waiting time and break time. ")
  @JsonProperty(JSON_PROPERTY_WORKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<WorkingBreakSettings> getWorking() {
    return working;
  }


  @JsonProperty(JSON_PROPERTY_WORKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorking(List<WorkingBreakSettings> working) {
    this.working = working;
  }


  public BreakSettings driving(List<DrivingBreakSettings> driving) {
    this.driving = driving;
    return this;
  }

  public BreakSettings addDrivingItem(DrivingBreakSettings drivingItem) {
    if (this.driving == null) {
      this.driving = new ArrayList<>();
    }
    this.driving.add(drivingItem);
    return this;
  }

   /**
   * A list of restrictions that specify how long the driver of the vehicle may drive without taking a break of at least the specified duration.
   * @return driving
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of restrictions that specify how long the driver of the vehicle may drive without taking a break of at least the specified duration.")
  @JsonProperty(JSON_PROPERTY_DRIVING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DrivingBreakSettings> getDriving() {
    return driving;
  }


  @JsonProperty(JSON_PROPERTY_DRIVING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDriving(List<DrivingBreakSettings> driving) {
    this.driving = driving;
  }


  /**
   * Return true if this BreakSettings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BreakSettings breakSettings = (BreakSettings) o;
    return Objects.equals(this.working, breakSettings.working) &&
        Objects.equals(this.driving, breakSettings.driving);
  }

  @Override
  public int hashCode() {
    return Objects.hash(working, driving);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BreakSettings {\n");
    sb.append("    working: ").append(toIndentedString(working)).append("\n");
    sb.append("    driving: ").append(toIndentedString(driving)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

