/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Defines the costs for using the vehicle to execute tasks.
 */
@ApiModel(description = "Defines the costs for using the vehicle to execute tasks.")
@JsonPropertyOrder({
  VehicleCosts.JSON_PROPERTY_PER_HOUR,
  VehicleCosts.JSON_PROPERTY_PER_KILOMETER,
  VehicleCosts.JSON_PROPERTY_FIXED
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-23T11:00:47.938367Z[Etc/UTC]")
public class VehicleCosts {
  public static final String JSON_PROPERTY_PER_HOUR = "perHour";
  private Double perHour;

  public static final String JSON_PROPERTY_PER_KILOMETER = "perKilometer";
  private Double perKilometer;

  public static final String JSON_PROPERTY_FIXED = "fixed";
  private Double fixed = 0d;

  public VehicleCosts() { 
  }

  public VehicleCosts perHour(Double perHour) {
    this.perHour = perHour;
    return this;
  }

   /**
   * Specifies the cost for every hour the vehicle is used.
   * minimum: 0
   * @return perHour
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "40", required = true, value = "Specifies the cost for every hour the vehicle is used.")
  @JsonProperty(JSON_PROPERTY_PER_HOUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getPerHour() {
    return perHour;
  }


  @JsonProperty(JSON_PROPERTY_PER_HOUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPerHour(Double perHour) {
    this.perHour = perHour;
  }


  public VehicleCosts perKilometer(Double perKilometer) {
    this.perKilometer = perKilometer;
    return this;
  }

   /**
   * Specifies the cost for every kilometer driven with the vehicle.
   * minimum: 0
   * @return perKilometer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.5", required = true, value = "Specifies the cost for every kilometer driven with the vehicle.")
  @JsonProperty(JSON_PROPERTY_PER_KILOMETER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getPerKilometer() {
    return perKilometer;
  }


  @JsonProperty(JSON_PROPERTY_PER_KILOMETER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPerKilometer(Double perKilometer) {
    this.perKilometer = perKilometer;
  }


  public VehicleCosts fixed(Double fixed) {
    this.fixed = fixed;
    return this;
  }

   /**
   * Specifies the fixed cost for assigning a route to the vehicle.
   * minimum: 0
   * @return fixed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Specifies the fixed cost for assigning a route to the vehicle.")
  @JsonProperty(JSON_PROPERTY_FIXED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFixed() {
    return fixed;
  }


  @JsonProperty(JSON_PROPERTY_FIXED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixed(Double fixed) {
    this.fixed = fixed;
  }


  /**
   * Return true if this VehicleCosts object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VehicleCosts vehicleCosts = (VehicleCosts) o;
    return Objects.equals(this.perHour, vehicleCosts.perHour) &&
        Objects.equals(this.perKilometer, vehicleCosts.perKilometer) &&
        Objects.equals(this.fixed, vehicleCosts.fixed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(perHour, perKilometer, fixed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VehicleCosts {\n");
    sb.append("    perHour: ").append(toIndentedString(perHour)).append("\n");
    sb.append("    perKilometer: ").append(toIndentedString(perKilometer)).append("\n");
    sb.append("    fixed: ").append(toIndentedString(fixed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

