/*
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routeoptimization.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CausingError
 */
@JsonPropertyOrder({
  CausingError.JSON_PROPERTY_DESCRIPTION,
  CausingError.JSON_PROPERTY_ERROR_CODE,
  CausingError.JSON_PROPERTY_PARAMETER,
  CausingError.JSON_PROPERTY_DETAILS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-10T11:34:31.010084Z[Etc/UTC]")
public class CausingError {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ERROR_CODE = "errorCode";
  private String errorCode;

  public static final String JSON_PROPERTY_PARAMETER = "parameter";
  private String parameter;

  public static final String JSON_PROPERTY_DETAILS = "details";
  private Map<String, Object> details = null;

  public CausingError() { 
  }

  public CausingError description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A human readable message that describes the error.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A human readable message that describes the error.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CausingError errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * A constant string that can be used to identify this error class programmatically. An errorCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified. Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **Error codes for** &#x60;GENERAL_VALIDATION_ERROR&#x60; * &#x60;GENERAL_INVALID_VALUE&#x60; - A parameter is set to an invalid value.   * &#x60;value&#x60; - The invalid value. * &#x60;GENERAL_UNRECOGNIZED_PARAMETER&#x60; - A parameter is unknown. * &#x60;GENERAL_MISSING_PARAMETER&#x60; - A required parameter is missing. * &#x60;GENERAL_INVALID_INTERVAL&#x60; - A time interval is invalid, i.e. start is greater than end. * &#x60;GENERAL_MINIMUM_LENGTH_VIOLATED&#x60; - The minimum length is violated.   * &#x60;minimumLength&#x60; - The minimum length (integer). * &#x60;GENERAL_MAXIMUM_LENGTH_VIOLATED&#x60; - The maximum length is violated.   * &#x60;maximumLength&#x60; - The maximum length (integer). * &#x60;GENERAL_DUPLICATE_ID&#x60; - Two or more objects of the same type have the same ID.   * &#x60;value&#x60; - The duplicated value.   * &#x60;indexes&#x60; - The list indexes of the objects with the same ID. * &#x60;GENERAL_MINIMUM_VALUE_VIOLATED&#x60; - The minimum value restriction is violated.   * &#x60;minimumValue&#x60; - The minimum value (integer or double). * &#x60;GENERAL_MAXIMUM_VALUE_VIOLATED&#x60; - The maximum value restriction is violated.   * &#x60;maximumValue&#x60; - The maximum value (integer or double). * &#x60;GENERAL_DUPLICATE_PARAMETER&#x60; - A parameter is duplicated. * &#x60;ROUTEOPTIMIZATION_LOCATION_CANNOT_BE_MATCHED&#x60; - The location cannot be matched to a street and no airline distance fallback is possible. * &#x60;ROUTEOPTIMIZATION_TOO_MANY_PROFILES&#x60; - Only one vehicle profile is allowed in a single request. * &#x60;ROUTEOPTIMIZATION_DEPOTS_INVALID&#x60; - If PickupDeliveryOrders are specified, no Depots are allowed. * &#x60;ROUTEOPTIMIZATION_ID_MISSING_IN_LOCATIONS&#x60; - The list of locations does not contain the location with ID &#39;&#39;.   * &#x60;locationId&#x60; - the missing location id. * &#x60;ROUTEOPTIMIZATION_ID_MISSING_IN_VEHICLES&#x60; - The list of vehicles does not contain the vehicle with ID &#39;&#39;.   * &#x60;vehicleId&#x60; - The missing vehicle id. * &#x60;ROUTEOPTIMIZATION_ID_MISSING_IN_ORDERS&#x60; - The list of orders does not contain the order with ID &#39;&#39;.   * &#x60;orderId&#x60; - The missing order id. * &#x60;ROUTEOPTIMIZATION_ID_MISSING_IN_TIMESLOTS&#x60; - The list of time slots of the corresponding location does not contain the time slot with ID &#39;&#39;.   * &#x60;timeSlotId&#x60; - The missing time slot id. * &#x60;ROUTEOPTIMIZATION_DEPOTS_INVALID&#x60; - If PickupDeliveryOrders are specified, no Depots are allowed. *&#x60;ROUTEOPTIMIZATION_DEPOT_MISSING_FOR_PICKUPS_OR_DELIVERIES&#x60; - At least one depot has to be specified for pickup or delivery orders. *&#x60;ROUTEOPTIMIZATION_EMPTY_ORDERS&#x60; - Empty orders without any pickups, deliveries and pickup-deliveries are not allowed. *&#x60;ROUTEOPTIMIZATION_INVALID_ORDERS_COMPOSITION&#x60; - When pickup-deliveries are given, pickups and/or deliveries are not allowed, and vice-versa. *&#x60;ROUTEOPTIMIZATION_VEHICLE_NOT_VALID_FOR_BREAKS&#x60; - The start or end duration of the vehicle exceeds the maximum work time between breaks. *&#x60;ROUTEOPTIMIZATION_DEPOT_NOT_VALID_FOR_BREAKS&#x60; - The total preparation duration of the depot exceeds the maximum work time between breaks for a vehicle. *&#x60;ROUTEOPTIMIZATION_NO_DEPOT_FOR_VEHICLE&#x60; - Due to the provided constraints, the vehicle is not allowed to visit any depot. *&#x60;ROUTEOPTIMIZATION_PARAMETER_CONFLICT&#x60; - Two parameters are in conflict with each other.   * &#x60;conflictingParameter&#x60; - A path to the affected property of the request.   * &#x60;message&#x60; - A human readable message that describes the error.  **Error codes for** &#x60;ROUTEOPTIMIZATION_RESTRICTION_EXCEEDED&#x60; * &#x60;ROUTEOPTIMIZATION_NUMBER_OF_OPTIMIZATIONS_EXCEEDED&#x60; - The maximum number of concurrent optimizations is exceeded.   * &#x60;limit&#x60; - The limit (integer). * &#x60;ROUTEOPTIMIZATION_NUMBER_OF_LOCATIONS_EXCEEDED&#x60; - The request contains too many locations.   * &#x60;locations&#x60; - The number of locations (integer).   * &#x60;limit&#x60; - The limit (integer). * &#x60;ROUTEOPTIMIZATION_NUMBER_OF_ORDERS_EXCEEDED&#x60; - The request contains too many orders.   * &#x60;orders&#x60; - The number of orders (integer).   * &#x60;limit&#x60; - The limit (integer). * &#x60;ROUTEOPTIMIZATION_NUMBER_OF_VEHICLES_EXCEEDED&#x60; - The request contains too many vehicles.   * &#x60;vehicles&#x60; - The number of vehicles (integer).   * &#x60;limit&#x60; - The limit (integer). * &#x60;ROUTEOPTIMIZATION_DURATION_EXCEEDS_LIMIT&#x60; - The duration of the request is too long.   * &#x60;duration&#x60; - The duration of the request [s] (integer).   * &#x60;limit&#x60; - The limit (integer).  **Error codes for** &#x60;ROUTEOPTIMIZATION_RESTRICTION_EXCEEDED&#x60; * &#x60;ROUTEOPTIMIZATION_NUMBER_OF_OPTIMIZATIONS_EXCEEDED&#x60; - The maximum number of concurrent optimizations is exceeded.  **Error codes for** &#x60;GENERAL_RESOURCE_NOT_FOUND&#x60; * &#x60;GENERAL_INVALID_ID&#x60; - The ID does not exist.   * &#x60;value&#x60; - The invalid ID.  **Error codes for** &#x60;ROUTEOPTIMIZATION_CONTENT_TOO_LARGE&#x60; * &#x60;ROUTEOPTIMIZATION_DECOMPRESSED_SIZE_EXCEEDED&#x60; - The decompressed size of the body exceeds the limit.   * &#x60;limit&#x60; - The decompressed body size limit [bytes].
   * @return errorCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A constant string that can be used to identify this error class programmatically. An errorCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified. Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **Error codes for** `GENERAL_VALIDATION_ERROR` * `GENERAL_INVALID_VALUE` - A parameter is set to an invalid value.   * `value` - The invalid value. * `GENERAL_UNRECOGNIZED_PARAMETER` - A parameter is unknown. * `GENERAL_MISSING_PARAMETER` - A required parameter is missing. * `GENERAL_INVALID_INTERVAL` - A time interval is invalid, i.e. start is greater than end. * `GENERAL_MINIMUM_LENGTH_VIOLATED` - The minimum length is violated.   * `minimumLength` - The minimum length (integer). * `GENERAL_MAXIMUM_LENGTH_VIOLATED` - The maximum length is violated.   * `maximumLength` - The maximum length (integer). * `GENERAL_DUPLICATE_ID` - Two or more objects of the same type have the same ID.   * `value` - The duplicated value.   * `indexes` - The list indexes of the objects with the same ID. * `GENERAL_MINIMUM_VALUE_VIOLATED` - The minimum value restriction is violated.   * `minimumValue` - The minimum value (integer or double). * `GENERAL_MAXIMUM_VALUE_VIOLATED` - The maximum value restriction is violated.   * `maximumValue` - The maximum value (integer or double). * `GENERAL_DUPLICATE_PARAMETER` - A parameter is duplicated. * `ROUTEOPTIMIZATION_LOCATION_CANNOT_BE_MATCHED` - The location cannot be matched to a street and no airline distance fallback is possible. * `ROUTEOPTIMIZATION_TOO_MANY_PROFILES` - Only one vehicle profile is allowed in a single request. * `ROUTEOPTIMIZATION_DEPOTS_INVALID` - If PickupDeliveryOrders are specified, no Depots are allowed. * `ROUTEOPTIMIZATION_ID_MISSING_IN_LOCATIONS` - The list of locations does not contain the location with ID ''.   * `locationId` - the missing location id. * `ROUTEOPTIMIZATION_ID_MISSING_IN_VEHICLES` - The list of vehicles does not contain the vehicle with ID ''.   * `vehicleId` - The missing vehicle id. * `ROUTEOPTIMIZATION_ID_MISSING_IN_ORDERS` - The list of orders does not contain the order with ID ''.   * `orderId` - The missing order id. * `ROUTEOPTIMIZATION_ID_MISSING_IN_TIMESLOTS` - The list of time slots of the corresponding location does not contain the time slot with ID ''.   * `timeSlotId` - The missing time slot id. * `ROUTEOPTIMIZATION_DEPOTS_INVALID` - If PickupDeliveryOrders are specified, no Depots are allowed. *`ROUTEOPTIMIZATION_DEPOT_MISSING_FOR_PICKUPS_OR_DELIVERIES` - At least one depot has to be specified for pickup or delivery orders. *`ROUTEOPTIMIZATION_EMPTY_ORDERS` - Empty orders without any pickups, deliveries and pickup-deliveries are not allowed. *`ROUTEOPTIMIZATION_INVALID_ORDERS_COMPOSITION` - When pickup-deliveries are given, pickups and/or deliveries are not allowed, and vice-versa. *`ROUTEOPTIMIZATION_VEHICLE_NOT_VALID_FOR_BREAKS` - The start or end duration of the vehicle exceeds the maximum work time between breaks. *`ROUTEOPTIMIZATION_DEPOT_NOT_VALID_FOR_BREAKS` - The total preparation duration of the depot exceeds the maximum work time between breaks for a vehicle. *`ROUTEOPTIMIZATION_NO_DEPOT_FOR_VEHICLE` - Due to the provided constraints, the vehicle is not allowed to visit any depot. *`ROUTEOPTIMIZATION_PARAMETER_CONFLICT` - Two parameters are in conflict with each other.   * `conflictingParameter` - A path to the affected property of the request.   * `message` - A human readable message that describes the error.  **Error codes for** `ROUTEOPTIMIZATION_RESTRICTION_EXCEEDED` * `ROUTEOPTIMIZATION_NUMBER_OF_OPTIMIZATIONS_EXCEEDED` - The maximum number of concurrent optimizations is exceeded.   * `limit` - The limit (integer). * `ROUTEOPTIMIZATION_NUMBER_OF_LOCATIONS_EXCEEDED` - The request contains too many locations.   * `locations` - The number of locations (integer).   * `limit` - The limit (integer). * `ROUTEOPTIMIZATION_NUMBER_OF_ORDERS_EXCEEDED` - The request contains too many orders.   * `orders` - The number of orders (integer).   * `limit` - The limit (integer). * `ROUTEOPTIMIZATION_NUMBER_OF_VEHICLES_EXCEEDED` - The request contains too many vehicles.   * `vehicles` - The number of vehicles (integer).   * `limit` - The limit (integer). * `ROUTEOPTIMIZATION_DURATION_EXCEEDS_LIMIT` - The duration of the request is too long.   * `duration` - The duration of the request [s] (integer).   * `limit` - The limit (integer).  **Error codes for** `ROUTEOPTIMIZATION_RESTRICTION_EXCEEDED` * `ROUTEOPTIMIZATION_NUMBER_OF_OPTIMIZATIONS_EXCEEDED` - The maximum number of concurrent optimizations is exceeded.  **Error codes for** `GENERAL_RESOURCE_NOT_FOUND` * `GENERAL_INVALID_ID` - The ID does not exist.   * `value` - The invalid ID.  **Error codes for** `ROUTEOPTIMIZATION_CONTENT_TOO_LARGE` * `ROUTEOPTIMIZATION_DECOMPRESSED_SIZE_EXCEEDED` - The decompressed size of the body exceeds the limit.   * `limit` - The decompressed body size limit [bytes].")
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getErrorCode() {
    return errorCode;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public CausingError parameter(String parameter) {
    this.parameter = parameter;
    return this;
  }

   /**
   * The name of the affected query or path parameter or a JSONPath to the affected property of the request.
   * @return parameter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the affected query or path parameter or a JSONPath to the affected property of the request.")
  @JsonProperty(JSON_PROPERTY_PARAMETER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParameter() {
    return parameter;
  }


  @JsonProperty(JSON_PROPERTY_PARAMETER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameter(String parameter) {
    this.parameter = parameter;
  }


  public CausingError details(Map<String, Object> details) {
    this.details = details;
    return this;
  }

  public CausingError putDetailsItem(String key, Object detailsItem) {
    if (this.details == null) {
      this.details = new HashMap<>();
    }
    this.details.put(key, detailsItem);
    return this;
  }

   /**
   * Additional properties specific to this error class.
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional properties specific to this error class.")
  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getDetails() {
    return details;
  }


  @JsonProperty(JSON_PROPERTY_DETAILS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetails(Map<String, Object> details) {
    this.details = details;
  }


  /**
   * Return true if this CausingError object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CausingError causingError = (CausingError) o;
    return Objects.equals(this.description, causingError.description) &&
        Objects.equals(this.errorCode, causingError.errorCode) &&
        Objects.equals(this.parameter, causingError.parameter) &&
        Objects.equals(this.details, causingError.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, errorCode, parameter, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CausingError {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

