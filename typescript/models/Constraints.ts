/* tslint:disable */
/* eslint-disable */
/**
 * OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CombinationConstraints,
    CombinationConstraintsFromJSON,
    CombinationConstraintsFromJSONTyped,
    CombinationConstraintsToJSON,
} from './CombinationConstraints';
import {
    OrderConstraints,
    OrderConstraintsFromJSON,
    OrderConstraintsFromJSONTyped,
    OrderConstraintsToJSON,
} from './OrderConstraints';
import {
    TaskConstraints,
    TaskConstraintsFromJSON,
    TaskConstraintsFromJSONTyped,
    TaskConstraintsToJSON,
} from './TaskConstraints';

/**
 * Describes constraints on the routes that can be scheduled by the optimization.
 * @export
 * @interface Constraints
 */
export interface Constraints {
    /**
     * 
     * @type {CombinationConstraints}
     * @memberof Constraints
     */
    combinations?: CombinationConstraints;
    /**
     * 
     * @type {OrderConstraints}
     * @memberof Constraints
     */
    orders?: OrderConstraints;
    /**
     * 
     * @type {TaskConstraints}
     * @memberof Constraints
     */
    tasks?: TaskConstraints;
}

export function ConstraintsFromJSON(json: any): Constraints {
    return ConstraintsFromJSONTyped(json, false);
}

export function ConstraintsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Constraints {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'combinations': !exists(json, 'combinations') ? undefined : CombinationConstraintsFromJSON(json['combinations']),
        'orders': !exists(json, 'orders') ? undefined : OrderConstraintsFromJSON(json['orders']),
        'tasks': !exists(json, 'tasks') ? undefined : TaskConstraintsFromJSON(json['tasks']),
    };
}

export function ConstraintsToJSON(value?: Constraints | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'combinations': CombinationConstraintsToJSON(value.combinations),
        'orders': OrderConstraintsToJSON(value.orders),
        'tasks': TaskConstraintsToJSON(value.tasks),
    };
}

