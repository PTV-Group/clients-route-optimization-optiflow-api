/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DrivingBreakSettings,
    DrivingBreakSettingsFromJSON,
    DrivingBreakSettingsFromJSONTyped,
    DrivingBreakSettingsToJSON,
} from './DrivingBreakSettings';
import {
    WorkingBreakSettings,
    WorkingBreakSettingsFromJSON,
    WorkingBreakSettingsFromJSONTyped,
    WorkingBreakSettingsToJSON,
} from './WorkingBreakSettings';

/**
 * Specifies when the driver of the vehicle must take a break during the route.
 * @export
 * @interface BreakSettings
 */
export interface BreakSettings {
    /**
     * A list of restrictions that specify how long the driver of the vehicle may work without taking a break. All the time spent during a route is considered working time except for waiting time and break time.
     * @type {Array<WorkingBreakSettings>}
     * @memberof BreakSettings
     */
    working?: Array<WorkingBreakSettings>;
    /**
     * A list of restrictions that specify how long the driver of the vehicle may drive without taking a break of at least the specified duration.
     * @type {Array<DrivingBreakSettings>}
     * @memberof BreakSettings
     */
    driving?: Array<DrivingBreakSettings>;
}

export function BreakSettingsFromJSON(json: any): BreakSettings {
    return BreakSettingsFromJSONTyped(json, false);
}

export function BreakSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BreakSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'working': !exists(json, 'working') ? undefined : ((json['working'] as Array<any>).map(WorkingBreakSettingsFromJSON)),
        'driving': !exists(json, 'driving') ? undefined : ((json['driving'] as Array<any>).map(DrivingBreakSettingsFromJSON)),
    };
}

export function BreakSettingsToJSON(value?: BreakSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'working': value.working === undefined ? undefined : ((value.working as Array<any>).map(WorkingBreakSettingsToJSON)),
        'driving': value.driving === undefined ? undefined : ((value.driving as Array<any>).map(DrivingBreakSettingsToJSON)),
    };
}

