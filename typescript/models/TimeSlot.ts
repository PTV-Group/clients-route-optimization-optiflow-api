/* tslint:disable */
/* eslint-disable */
/**
 * OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes a possibility to schedule an appointment to execute tasks at a location.
 * @export
 * @interface TimeSlot
 */
export interface TimeSlot {
    /**
     * A unique identifier of the time slot. Must be unique within each location.
     * @type {string}
     * @memberof TimeSlot
     */
    id: string;
    /**
     * The earliest point in time an appointment may start in this time slot. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) and not before `1970-01-01T00:00:00+00:00`. The date must provide an offset to UTC.
     * @type {Date}
     * @memberof TimeSlot
     */
    earliestStart: Date;
    /**
     * The latest point in time an appointment may start in this time slot. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) and not before `1970-01-01T00:00:00+00:00`. The date must provide an offset to UTC.
     * @type {Date}
     * @memberof TimeSlot
     */
    latestStart: Date;
    /**
     * Describes how long [s] it takes before the first task can be executed after starting the appointment.
     * @type {number}
     * @memberof TimeSlot
     */
    preparationDuration?: number;
}

export function TimeSlotFromJSON(json: any): TimeSlot {
    return TimeSlotFromJSONTyped(json, false);
}

export function TimeSlotFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimeSlot {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'earliestStart': (new Date(json['earliestStart'])),
        'latestStart': (new Date(json['latestStart'])),
        'preparationDuration': !exists(json, 'preparationDuration') ? undefined : json['preparationDuration'],
    };
}

export function TimeSlotToJSON(value?: TimeSlot | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'earliestStart': (value.earliestStart.toISOString()),
        'latestStart': (value.latestStart.toISOString()),
        'preparationDuration': value.preparationDuration,
    };
}

