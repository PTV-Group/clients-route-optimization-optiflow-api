/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BreakSettings,
    BreakSettingsFromJSON,
    BreakSettingsFromJSONTyped,
    BreakSettingsToJSON,
} from './BreakSettings';
import {
    VehicleConstraints,
    VehicleConstraintsFromJSON,
    VehicleConstraintsFromJSONTyped,
    VehicleConstraintsToJSON,
} from './VehicleConstraints';
import {
    VehicleCosts,
    VehicleCostsFromJSON,
    VehicleCostsFromJSONTyped,
    VehicleCostsToJSON,
} from './VehicleCosts';
import {
    VehicleEnd,
    VehicleEndFromJSON,
    VehicleEndFromJSONTyped,
    VehicleEndToJSON,
} from './VehicleEnd';
import {
    VehicleRouting,
    VehicleRoutingFromJSON,
    VehicleRoutingFromJSONTyped,
    VehicleRoutingToJSON,
} from './VehicleRouting';
import {
    VehicleStart,
    VehicleStartFromJSON,
    VehicleStartFromJSONTyped,
    VehicleStartToJSON,
} from './VehicleStart';

/**
 * A vehicle that can be used to schedule routes. The optimization can only assign a single route to a vehicle while respecting the properties and constraints of the vehicle.
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * A unique identifier of the vehicle.
     * @type {string}
     * @memberof Vehicle
     */
    id: string;
    /**
     * 
     * @type {VehicleStart}
     * @memberof Vehicle
     */
    start: VehicleStart;
    /**
     * 
     * @type {VehicleEnd}
     * @memberof Vehicle
     */
    end: VehicleEnd;
    /**
     * 
     * @type {VehicleRouting}
     * @memberof Vehicle
     */
    routing: VehicleRouting;
    /**
     * 
     * @type {VehicleCosts}
     * @memberof Vehicle
     */
    costs: VehicleCosts;
    /**
     * 
     * @type {BreakSettings}
     * @memberof Vehicle
     */
    breaks?: BreakSettings;
    /**
     * 
     * @type {VehicleConstraints}
     * @memberof Vehicle
     */
    constraints?: VehicleConstraints;
    /**
     * A list of categories the vehicle belongs to that can be used to describe constraints.
     * @type {Array<string>}
     * @memberof Vehicle
     */
    categories?: Array<string>;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'start': VehicleStartFromJSON(json['start']),
        'end': VehicleEndFromJSON(json['end']),
        'routing': VehicleRoutingFromJSON(json['routing']),
        'costs': VehicleCostsFromJSON(json['costs']),
        'breaks': !exists(json, 'breaks') ? undefined : BreakSettingsFromJSON(json['breaks']),
        'constraints': !exists(json, 'constraints') ? undefined : VehicleConstraintsFromJSON(json['constraints']),
        'categories': !exists(json, 'categories') ? undefined : json['categories'],
    };
}

export function VehicleToJSON(value?: Vehicle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'start': VehicleStartToJSON(value.start),
        'end': VehicleEndToJSON(value.end),
        'routing': VehicleRoutingToJSON(value.routing),
        'costs': VehicleCostsToJSON(value.costs),
        'breaks': BreakSettingsToJSON(value.breaks),
        'constraints': VehicleConstraintsToJSON(value.constraints),
        'categories': value.categories,
    };
}

