/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ForbiddenTaskSequence,
    ForbiddenTaskSequenceFromJSON,
    ForbiddenTaskSequenceFromJSONTyped,
    ForbiddenTaskSequenceToJSON,
} from './ForbiddenTaskSequence';
import {
    RespectedTaskSequence,
    RespectedTaskSequenceFromJSON,
    RespectedTaskSequenceFromJSONTyped,
    RespectedTaskSequenceToJSON,
} from './RespectedTaskSequence';

/**
 * Constraints on the way tasks can be scheduled together on routes.
 * @export
 * @interface TaskConstraints
 */
export interface TaskConstraints {
    /**
     * A list of sequences that must be respected when scheduling routes. Tasks belonging to a category that occurs earlier in the sequence must be scheduled on the route before a task belonging to a category later in the sequence.
     * @type {Array<RespectedTaskSequence>}
     * @memberof TaskConstraints
     */
    respectedSequences?: Array<RespectedTaskSequence>;
    /**
     * A list of sequences that are forbidden to be scheduled on a route. Tasks belonging to certain categories must not be scheduled before, or immediately before, tasks belonging to another specific category.
     * @type {Array<ForbiddenTaskSequence>}
     * @memberof TaskConstraints
     */
    forbiddenSequences?: Array<ForbiddenTaskSequence>;
}

export function TaskConstraintsFromJSON(json: any): TaskConstraints {
    return TaskConstraintsFromJSONTyped(json, false);
}

export function TaskConstraintsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskConstraints {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'respectedSequences': !exists(json, 'respectedSequences') ? undefined : ((json['respectedSequences'] as Array<any>).map(RespectedTaskSequenceFromJSON)),
        'forbiddenSequences': !exists(json, 'forbiddenSequences') ? undefined : ((json['forbiddenSequences'] as Array<any>).map(ForbiddenTaskSequenceFromJSON)),
    };
}

export function TaskConstraintsToJSON(value?: TaskConstraints | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'respectedSequences': value.respectedSequences === undefined ? undefined : ((value.respectedSequences as Array<any>).map(RespectedTaskSequenceToJSON)),
        'forbiddenSequences': value.forbiddenSequences === undefined ? undefined : ((value.forbiddenSequences as Array<any>).map(ForbiddenTaskSequenceToJSON)),
    };
}

