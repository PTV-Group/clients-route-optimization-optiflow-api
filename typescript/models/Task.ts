/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Break,
    BreakFromJSON,
    BreakFromJSONTyped,
    BreakToJSON,
} from './Break';
import {
    TaskType,
    TaskTypeFromJSON,
    TaskTypeFromJSONTyped,
    TaskTypeToJSON,
} from './TaskType';

/**
 * A description of a task that is scheduled for execution on a route.
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * The unique identifier of the order whose pickup or delivery is described by this task.
     * @type {string}
     * @memberof Task
     */
    orderId?: string;
    /**
     * 
     * @type {TaskType}
     * @memberof Task
     */
    type?: TaskType;
    /**
     * A list of breaks that are scheduled to be taken before the execution of the task.
     * @type {Array<Break>}
     * @memberof Task
     */
    breaks?: Array<Break>;
    /**
     * The point in time when the execution of the task is scheduled to start. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof Task
     */
    start?: Date;
    /**
     * The scheduled duration [s] for the task to be executed. This is the duration between the start and end of the task.
     * @type {number}
     * @memberof Task
     */
    duration?: number;
    /**
     * The point in time when the execution of the task is scheduled to end. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof Task
     */
    end?: Date;
    /**
     * The unique identifier of the depot in case the task is a pickup or a delivery at a depot.
     * @type {string}
     * @memberof Task
     */
    depotId?: string;
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'type': !exists(json, 'type') ? undefined : TaskTypeFromJSON(json['type']),
        'breaks': !exists(json, 'breaks') ? undefined : ((json['breaks'] as Array<any>).map(BreakFromJSON)),
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
        'depotId': !exists(json, 'depotId') ? undefined : json['depotId'],
    };
}

export function TaskToJSON(value?: Task | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'orderId': value.orderId,
        'type': TaskTypeToJSON(value.type),
        'breaks': value.breaks === undefined ? undefined : ((value.breaks as Array<any>).map(BreakToJSON)),
        'start': value.start === undefined ? undefined : (value.start.toISOString()),
        'duration': value.duration,
        'end': value.end === undefined ? undefined : (value.end.toISOString()),
        'depotId': value.depotId,
    };
}

