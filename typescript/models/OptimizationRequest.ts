/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Constraints,
    ConstraintsFromJSON,
    ConstraintsFromJSONTyped,
    ConstraintsToJSON,
} from './Constraints';
import {
    Depot,
    DepotFromJSON,
    DepotFromJSONTyped,
    DepotToJSON,
} from './Depot';
import {
    Location,
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';
import {
    OptimizationSettings,
    OptimizationSettingsFromJSON,
    OptimizationSettingsFromJSONTyped,
    OptimizationSettingsToJSON,
} from './OptimizationSettings';
import {
    Orders,
    OrdersFromJSON,
    OrdersFromJSONTyped,
    OrdersToJSON,
} from './Orders';
import {
    Vehicle,
    VehicleFromJSON,
    VehicleFromJSONTyped,
    VehicleToJSON,
} from './Vehicle';

/**
 * The request data needed to start an optimization.
 * @export
 * @interface OptimizationRequest
 */
export interface OptimizationRequest {
    /**
     * 
     * @type {OptimizationSettings}
     * @memberof OptimizationRequest
     */
    settings: OptimizationSettings;
    /**
     * A list of locations where goods have to be picked up or delivered, or where vehicles are located.
     * 
     *  Please note that the upper bound on number of locations is a technical limit. Check your individual price plan or contract to see which limits apply.
     * @type {Array<Location>}
     * @memberof OptimizationRequest
     */
    locations: Array<Location>;
    /**
     * 
     * @type {Orders}
     * @memberof OptimizationRequest
     */
    orders: Orders;
    /**
     * A list of vehicles that can be used by optimization to schedule routes. Optimization can only assign a single route to a vehicle and must respect the properties and constraints of the vehicle.
     * 
     *  Please note that the upper bound on number of vehicles is a technical limit. Check your individual price plan or contract to see which limits apply.
     * @type {Array<Vehicle>}
     * @memberof OptimizationRequest
     */
    vehicles: Array<Vehicle>;
    /**
     * A list of depots where pickup orders can be delivered to or delivery orders can be picked up from. When providing pickup or delivery orders, at least one depot must be specified. Depots must not be specified when all orders are pickup-delivery orders. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards, delivery orders can be loaded into the vehicle. Those must be delivered before stopping at the next depot.
     * @type {Array<Depot>}
     * @memberof OptimizationRequest
     */
    depots?: Array<Depot>;
    /**
     * 
     * @type {Constraints}
     * @memberof OptimizationRequest
     */
    constraints?: Constraints;
}

export function OptimizationRequestFromJSON(json: any): OptimizationRequest {
    return OptimizationRequestFromJSONTyped(json, false);
}

export function OptimizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'settings': OptimizationSettingsFromJSON(json['settings']),
        'locations': ((json['locations'] as Array<any>).map(LocationFromJSON)),
        'orders': OrdersFromJSON(json['orders']),
        'vehicles': ((json['vehicles'] as Array<any>).map(VehicleFromJSON)),
        'depots': !exists(json, 'depots') ? undefined : ((json['depots'] as Array<any>).map(DepotFromJSON)),
        'constraints': !exists(json, 'constraints') ? undefined : ConstraintsFromJSON(json['constraints']),
    };
}

export function OptimizationRequestToJSON(value?: OptimizationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'settings': OptimizationSettingsToJSON(value.settings),
        'locations': ((value.locations as Array<any>).map(LocationToJSON)),
        'orders': OrdersToJSON(value.orders),
        'vehicles': ((value.vehicles as Array<any>).map(VehicleToJSON)),
        'depots': value.depots === undefined ? undefined : ((value.depots as Array<any>).map(DepotToJSON)),
        'constraints': ConstraintsToJSON(value.constraints),
    };
}

