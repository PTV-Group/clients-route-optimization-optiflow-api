/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Metrics,
    MetricsFromJSON,
    MetricsFromJSONTyped,
    MetricsToJSON,
} from './Metrics';
import {
    OptimizationStatus,
    OptimizationStatusFromJSON,
    OptimizationStatusFromJSONTyped,
    OptimizationStatusToJSON,
} from './OptimizationStatus';
import {
    Route,
    RouteFromJSON,
    RouteFromJSONTyped,
    RouteToJSON,
} from './Route';
import {
    Warning,
    WarningFromJSON,
    WarningFromJSONTyped,
    WarningToJSON,
} from './Warning';

/**
 * The current result of the optimization.
 * @export
 * @interface OptimizationResult
 */
export interface OptimizationResult {
    /**
     * The unique identifier of the optimization.
     * @type {string}
     * @memberof OptimizationResult
     */
    id: string;
    /**
     * 
     * @type {OptimizationStatus}
     * @memberof OptimizationResult
     */
    status: OptimizationStatus;
    /**
     * The routes scheduled by the optimization. As long as the optimization is not yet *SUCCEEDED*, scheduled routes may be only an intermediate result.
     * @type {Array<Route>}
     * @memberof OptimizationResult
     */
    routes?: Array<Route>;
    /**
     * 
     * @type {Metrics}
     * @memberof OptimizationResult
     */
    metrics?: Metrics;
    /**
     * 
     * @type {Error}
     * @memberof OptimizationResult
     */
    error?: Error;
    /**
     * A list of warnings concerning the optimization.
     * @type {Array<Warning>}
     * @memberof OptimizationResult
     */
    warnings?: Array<Warning>;
}

export function OptimizationResultFromJSON(json: any): OptimizationResult {
    return OptimizationResultFromJSONTyped(json, false);
}

export function OptimizationResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizationResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'status': OptimizationStatusFromJSON(json['status']),
        'routes': !exists(json, 'routes') ? undefined : ((json['routes'] as Array<any>).map(RouteFromJSON)),
        'metrics': !exists(json, 'metrics') ? undefined : MetricsFromJSON(json['metrics']),
        'error': !exists(json, 'error') ? undefined : json['error'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningFromJSON)),
    };
}

export function OptimizationResultToJSON(value?: OptimizationResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'status': OptimizationStatusToJSON(value.status),
        'routes': value.routes === undefined ? undefined : ((value.routes as Array<any>).map(RouteToJSON)),
        'metrics': MetricsToJSON(value.metrics),
        'error': value.error,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningToJSON)),
    };
}

