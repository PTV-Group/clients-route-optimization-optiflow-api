/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Break,
    BreakFromJSON,
    BreakFromJSONTyped,
    BreakToJSON,
} from './Break';
import {
    Task,
    TaskFromJSON,
    TaskFromJSONTyped,
    TaskToJSON,
} from './Task';

/**
 * A collection of consecutive tasks that are allocated to a time slot.
 * @export
 * @interface Appointment
 */
export interface Appointment {
    /**
     * The unique identifier of the time slot this appointment is assigned to.
     * @type {string}
     * @memberof Appointment
     */
    timeSlotId?: string;
    /**
     * A list of breaks that are scheduled to be taken before the appointment.
     * @type {Array<Break>}
     * @memberof Appointment
     */
    breaks?: Array<Break>;
    /**
     * The duration [s] of the waiting period before the appointment can start.
     * @type {number}
     * @memberof Appointment
     */
    waitingDuration?: number;
    /**
     * The point in time when the appointment starts. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof Appointment
     */
    start?: Date;
    /**
     * The duration [s] of the preparation period before the first task can start. This is determined by the allocated time slot.
     * @type {number}
     * @memberof Appointment
     */
    preparationDuration?: number;
    /**
     * The list of tasks that are scheduled to be executed within this appointment. Each task can either be a pickup or a delivery. For every order scheduled on the route, the route will contain a task describing the pickup of the order and a task describing the delivery of the order. When the order is a pickup order (resp. delivery order), its delivery task (resp. pickup task) will be scheduled at a depot.
     * @type {Array<Task>}
     * @memberof Appointment
     */
    tasks?: Array<Task>;
    /**
     * The point in time when the appointment ends. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
     * @type {Date}
     * @memberof Appointment
     */
    end?: Date;
}

export function AppointmentFromJSON(json: any): Appointment {
    return AppointmentFromJSONTyped(json, false);
}

export function AppointmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Appointment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'timeSlotId': !exists(json, 'timeSlotId') ? undefined : json['timeSlotId'],
        'breaks': !exists(json, 'breaks') ? undefined : ((json['breaks'] as Array<any>).map(BreakFromJSON)),
        'waitingDuration': !exists(json, 'waitingDuration') ? undefined : json['waitingDuration'],
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
        'preparationDuration': !exists(json, 'preparationDuration') ? undefined : json['preparationDuration'],
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(TaskFromJSON)),
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
    };
}

export function AppointmentToJSON(value?: Appointment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'timeSlotId': value.timeSlotId,
        'breaks': value.breaks === undefined ? undefined : ((value.breaks as Array<any>).map(BreakToJSON)),
        'waitingDuration': value.waitingDuration,
        'start': value.start === undefined ? undefined : (value.start.toISOString()),
        'preparationDuration': value.preparationDuration,
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(TaskToJSON)),
        'end': value.end === undefined ? undefined : (value.end.toISOString()),
    };
}

