/* tslint:disable */
/* eslint-disable */
/**
 * Route Optimization OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Load,
    LoadFromJSON,
    LoadFromJSONTyped,
    LoadToJSON,
} from './Load';
import {
    RouteConstraints,
    RouteConstraintsFromJSON,
    RouteConstraintsFromJSONTyped,
    RouteConstraintsToJSON,
} from './RouteConstraints';

/**
 * Defines constraints on the tasks that can be executed with the vehicle.
 * @export
 * @interface VehicleConstraints
 */
export interface VehicleConstraints {
    /**
     * A list of load dimensions that describe the capacity of the vehicle. For each dimension specified in this list, the sum of the values of the orders loaded in the vehicle must be lower than or equal to the value of the vehicle. For dimension not specified, the capacity of the vehicle is assumed to be zero.
     * @type {Array<Load>}
     * @memberof VehicleConstraints
     */
    maximumLoads?: Array<Load>;
    /**
     * 
     * @type {RouteConstraints}
     * @memberof VehicleConstraints
     */
    route?: RouteConstraints;
}

export function VehicleConstraintsFromJSON(json: any): VehicleConstraints {
    return VehicleConstraintsFromJSONTyped(json, false);
}

export function VehicleConstraintsFromJSONTyped(json: any, ignoreDiscriminator: boolean): VehicleConstraints {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'maximumLoads': !exists(json, 'maximumLoads') ? undefined : ((json['maximumLoads'] as Array<any>).map(LoadFromJSON)),
        'route': !exists(json, 'route') ? undefined : RouteConstraintsFromJSON(json['route']),
    };
}

export function VehicleConstraintsToJSON(value?: VehicleConstraints | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'maximumLoads': value.maximumLoads === undefined ? undefined : ((value.maximumLoads as Array<any>).map(LoadToJSON)),
        'route': RouteConstraintsToJSON(value.route),
    };
}

