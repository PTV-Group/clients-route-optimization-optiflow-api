/* tslint:disable */
/* eslint-disable */
/**
 * OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes a constraint where orders are forbidden to be loaded or unloaded while other orders are loaded in the vehicle.
 * @export
 * @interface LoadingIncompatibilityConstraint
 */
export interface LoadingIncompatibilityConstraint {
    /**
     * Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category.
     * @type {string}
     * @memberof LoadingIncompatibilityConstraint
     */
    loadedOrderCategory: string;
    /**
     * Orders belonging to this category cannot be loaded or unloaded while the constraint applies. The constraint will be ignored when no order belongs to this category.
     * @type {string}
     * @memberof LoadingIncompatibilityConstraint
     */
    forbiddenOrderCategory: string;
    /**
     * The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category.
     * @type {string}
     * @memberof LoadingIncompatibilityConstraint
     */
    vehicleCategory?: string;
}

export function LoadingIncompatibilityConstraintFromJSON(json: any): LoadingIncompatibilityConstraint {
    return LoadingIncompatibilityConstraintFromJSONTyped(json, false);
}

export function LoadingIncompatibilityConstraintFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoadingIncompatibilityConstraint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'loadedOrderCategory': json['loadedOrderCategory'],
        'forbiddenOrderCategory': json['forbiddenOrderCategory'],
        'vehicleCategory': !exists(json, 'vehicleCategory') ? undefined : json['vehicleCategory'],
    };
}

export function LoadingIncompatibilityConstraintToJSON(value?: LoadingIncompatibilityConstraint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'loadedOrderCategory': value.loadedOrderCategory,
        'forbiddenOrderCategory': value.forbiddenOrderCategory,
        'vehicleCategory': value.vehicleCategory,
    };
}

