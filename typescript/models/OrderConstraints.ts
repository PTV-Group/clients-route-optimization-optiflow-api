/* tslint:disable */
/* eslint-disable */
/**
 * OptiFlow
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LoadingIncompatibilityConstraint,
    LoadingIncompatibilityConstraintFromJSON,
    LoadingIncompatibilityConstraintFromJSONTyped,
    LoadingIncompatibilityConstraintToJSON,
} from './LoadingIncompatibilityConstraint';
import {
    RespectedOrderSequence,
    RespectedOrderSequenceFromJSON,
    RespectedOrderSequenceFromJSONTyped,
    RespectedOrderSequenceToJSON,
} from './RespectedOrderSequence';

/**
 * Describes constraints on the way orders can be scheduled together on routes.
 * @export
 * @interface OrderConstraints
 */
export interface OrderConstraints {
    /**
     * A list of sequences that must be respected when scheduling routes. Orders belonging to a category that occurs earlier in the sequence must be delivered in the route before an order belonging to a category later in the sequence can be picked up.
     * @type {Array<RespectedOrderSequence>}
     * @memberof OrderConstraints
     */
    respectedSequences?: Array<RespectedOrderSequence>;
    /**
     * A list of constraints that prevent orders to be loaded or unloaded while other orders are loaded in the vehicle.
     * @type {Array<LoadingIncompatibilityConstraint>}
     * @memberof OrderConstraints
     */
    loadingIncompatibilities?: Array<LoadingIncompatibilityConstraint>;
}

export function OrderConstraintsFromJSON(json: any): OrderConstraints {
    return OrderConstraintsFromJSONTyped(json, false);
}

export function OrderConstraintsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderConstraints {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'respectedSequences': !exists(json, 'respectedSequences') ? undefined : ((json['respectedSequences'] as Array<any>).map(RespectedOrderSequenceFromJSON)),
        'loadingIncompatibilities': !exists(json, 'loadingIncompatibilities') ? undefined : ((json['loadingIncompatibilities'] as Array<any>).map(LoadingIncompatibilityConstraintFromJSON)),
    };
}

export function OrderConstraintsToJSON(value?: OrderConstraints | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'respectedSequences': value.respectedSequences === undefined ? undefined : ((value.respectedSequences as Array<any>).map(RespectedOrderSequenceToJSON)),
        'loadingIncompatibilities': value.loadingIncompatibilities === undefined ? undefined : ((value.loadingIncompatibilities as Array<any>).map(LoadingIncompatibilityConstraintToJSON)),
    };
}

