/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// The current result of the optimization. 
    /// </summary>
    [DataContract(Name = "OptimizationResult")]
    public partial class OptimizationResult : IEquatable<OptimizationResult>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public OptimizationStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptimizationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationResult" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the optimization. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="routes">The routes scheduled by the optimization. As long as the optimization is not yet *SUCCEEDED*, scheduled routes may be only an intermediate result. .</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="error">error.</param>
        /// <param name="warnings">A list of warnings concerning the optimization..</param>
        public OptimizationResult(Guid id = default(Guid), OptimizationStatus status = default(OptimizationStatus), List<Route> routes = default(List<Route>), Metrics metrics = default(Metrics), Error error = default(Error), List<Warning> warnings = default(List<Warning>))
        {
            this.Id = id;
            this.Status = status;
            this.Routes = routes;
            this.Metrics = metrics;
            this.Error = error;
            this.Warnings = warnings;
        }

        /// <summary>
        /// The unique identifier of the optimization.
        /// </summary>
        /// <value>The unique identifier of the optimization.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// The routes scheduled by the optimization. As long as the optimization is not yet *SUCCEEDED*, scheduled routes may be only an intermediate result. 
        /// </summary>
        /// <value>The routes scheduled by the optimization. As long as the optimization is not yet *SUCCEEDED*, scheduled routes may be only an intermediate result. </value>
        [DataMember(Name = "routes", EmitDefaultValue = false)]
        public List<Route> Routes { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public Metrics Metrics { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public Error Error { get; set; }

        /// <summary>
        /// A list of warnings concerning the optimization.
        /// </summary>
        /// <value>A list of warnings concerning the optimization.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizationResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizationResult);
        }

        /// <summary>
        /// Returns true if OptimizationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizationResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Routes == input.Routes ||
                    this.Routes != null &&
                    input.Routes != null &&
                    this.Routes.SequenceEqual(input.Routes)
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    (this.Metrics != null &&
                    this.Metrics.Equals(input.Metrics))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Routes != null)
                {
                    hashCode = (hashCode * 59) + this.Routes.GetHashCode();
                }
                if (this.Metrics != null)
                {
                    hashCode = (hashCode * 59) + this.Metrics.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
