/*
 * OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Defines constraints on the tasks that can be executed with the vehicle.
    /// </summary>
    [DataContract(Name = "VehicleConstraints")]
    public partial class VehicleConstraints : IEquatable<VehicleConstraints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleConstraints" /> class.
        /// </summary>
        /// <param name="maximumLoads">A list of load dimensions that describe the capacity of the vehicle. For each dimension specified in this list, the sum of the values of the orders loaded in the vehicle must be lower than or equal to the value of the vehicle. For dimension not specified, the capacity of the vehicle is assumed to be zero. .</param>
        /// <param name="route">route.</param>
        public VehicleConstraints(List<Load> maximumLoads = default(List<Load>), RouteConstraints route = default(RouteConstraints))
        {
            this.MaximumLoads = maximumLoads;
            this.Route = route;
        }

        /// <summary>
        /// A list of load dimensions that describe the capacity of the vehicle. For each dimension specified in this list, the sum of the values of the orders loaded in the vehicle must be lower than or equal to the value of the vehicle. For dimension not specified, the capacity of the vehicle is assumed to be zero. 
        /// </summary>
        /// <value>A list of load dimensions that describe the capacity of the vehicle. For each dimension specified in this list, the sum of the values of the orders loaded in the vehicle must be lower than or equal to the value of the vehicle. For dimension not specified, the capacity of the vehicle is assumed to be zero. </value>
        [DataMember(Name = "maximumLoads", EmitDefaultValue = false)]
        public List<Load> MaximumLoads { get; set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name = "route", EmitDefaultValue = false)]
        public RouteConstraints Route { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleConstraints {\n");
            sb.Append("  MaximumLoads: ").Append(MaximumLoads).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleConstraints);
        }

        /// <summary>
        /// Returns true if VehicleConstraints instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleConstraints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleConstraints input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaximumLoads == input.MaximumLoads ||
                    this.MaximumLoads != null &&
                    input.MaximumLoads != null &&
                    this.MaximumLoads.SequenceEqual(input.MaximumLoads)
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaximumLoads != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumLoads.GetHashCode();
                }
                if (this.Route != null)
                {
                    hashCode = (hashCode * 59) + this.Route.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
