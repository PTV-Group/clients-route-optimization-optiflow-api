/*
 * OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Describes constraints on the routes that can be scheduled by the optimization.
    /// </summary>
    [DataContract(Name = "Constraints")]
    public partial class Constraints : IEquatable<Constraints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Constraints" /> class.
        /// </summary>
        /// <param name="combinations">combinations.</param>
        /// <param name="orders">orders.</param>
        /// <param name="tasks">tasks.</param>
        public Constraints(CombinationConstraints combinations = default(CombinationConstraints), OrderConstraints orders = default(OrderConstraints), TaskConstraints tasks = default(TaskConstraints))
        {
            this.Combinations = combinations;
            this.Orders = orders;
            this.Tasks = tasks;
        }

        /// <summary>
        /// Gets or Sets Combinations
        /// </summary>
        [DataMember(Name = "combinations", EmitDefaultValue = false)]
        public CombinationConstraints Combinations { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name = "orders", EmitDefaultValue = false)]
        public OrderConstraints Orders { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name = "tasks", EmitDefaultValue = false)]
        public TaskConstraints Tasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Constraints {\n");
            sb.Append("  Combinations: ").Append(Combinations).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Constraints);
        }

        /// <summary>
        /// Returns true if Constraints instances are equal
        /// </summary>
        /// <param name="input">Instance of Constraints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Constraints input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Combinations == input.Combinations ||
                    (this.Combinations != null &&
                    this.Combinations.Equals(input.Combinations))
                ) && 
                (
                    this.Orders == input.Orders ||
                    (this.Orders != null &&
                    this.Orders.Equals(input.Orders))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    (this.Tasks != null &&
                    this.Tasks.Equals(input.Tasks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Combinations != null)
                {
                    hashCode = (hashCode * 59) + this.Combinations.GetHashCode();
                }
                if (this.Orders != null)
                {
                    hashCode = (hashCode * 59) + this.Orders.GetHashCode();
                }
                if (this.Tasks != null)
                {
                    hashCode = (hashCode * 59) + this.Tasks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
