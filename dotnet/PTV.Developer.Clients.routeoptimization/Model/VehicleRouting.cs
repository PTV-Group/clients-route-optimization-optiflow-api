/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Specifies how time-distance data must be calculated for routes driven by the vehicle.
    /// </summary>
    [DataContract(Name = "VehicleRouting")]
    public partial class VehicleRouting : IEquatable<VehicleRouting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleRouting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleRouting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleRouting" /> class.
        /// </summary>
        /// <param name="profile">A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the predefined profiles *EUR_VAN* or *EUR_TRUCK_40T*. Only one profile may be used within a single optimization.  (required).</param>
        /// <param name="speedFactor">An additional factor to apply to the speed of the vehicle. When lower than one, the driving durations of the vehicle will increase, when greater than one, the driving durations of the vehicle will decrease.  (default to 1D).</param>
        public VehicleRouting(string profile = default(string), double speedFactor = 1D)
        {
            // to ensure "profile" is required (not null)
            if (profile == null) {
                throw new ArgumentNullException("profile is a required property for VehicleRouting and cannot be null");
            }
            this.Profile = profile;
            this.SpeedFactor = speedFactor;
        }

        /// <summary>
        /// A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the predefined profiles *EUR_VAN* or *EUR_TRUCK_40T*. Only one profile may be used within a single optimization. 
        /// </summary>
        /// <value>A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the predefined profiles *EUR_VAN* or *EUR_TRUCK_40T*. Only one profile may be used within a single optimization. </value>
        [DataMember(Name = "profile", IsRequired = true, EmitDefaultValue = false)]
        public string Profile { get; set; }

        /// <summary>
        /// An additional factor to apply to the speed of the vehicle. When lower than one, the driving durations of the vehicle will increase, when greater than one, the driving durations of the vehicle will decrease. 
        /// </summary>
        /// <value>An additional factor to apply to the speed of the vehicle. When lower than one, the driving durations of the vehicle will increase, when greater than one, the driving durations of the vehicle will decrease. </value>
        [DataMember(Name = "speedFactor", EmitDefaultValue = false)]
        public double SpeedFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleRouting {\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  SpeedFactor: ").Append(SpeedFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleRouting);
        }

        /// <summary>
        /// Returns true if VehicleRouting instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleRouting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleRouting input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.SpeedFactor == input.SpeedFactor ||
                    this.SpeedFactor.Equals(input.SpeedFactor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpeedFactor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // SpeedFactor (double) minimum
            if (this.SpeedFactor < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpeedFactor, must be a value greater than or equal to 0.", new [] { "SpeedFactor" });
            }

            yield break;
        }
    }

}
