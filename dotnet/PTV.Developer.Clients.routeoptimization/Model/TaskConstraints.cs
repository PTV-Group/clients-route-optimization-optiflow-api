/*
 * OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Constraints on the way tasks can be scheduled together on routes.
    /// </summary>
    [DataContract(Name = "TaskConstraints")]
    public partial class TaskConstraints : IEquatable<TaskConstraints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskConstraints" /> class.
        /// </summary>
        /// <param name="respectedSequences">A list of sequences that must be respected when scheduling routes. Tasks belonging to a category that occurs earlier in the sequence must be scheduled on the route before a task belonging to a category later in the sequence. .</param>
        /// <param name="forbiddenSequences">A list of sequences that are forbidden to be scheduled on a route. Tasks belonging to certain categories must not be scheduled before, or immediately before, tasks belonging to another specific category. .</param>
        public TaskConstraints(List<RespectedTaskSequence> respectedSequences = default(List<RespectedTaskSequence>), List<ForbiddenTaskSequence> forbiddenSequences = default(List<ForbiddenTaskSequence>))
        {
            this.RespectedSequences = respectedSequences;
            this.ForbiddenSequences = forbiddenSequences;
        }

        /// <summary>
        /// A list of sequences that must be respected when scheduling routes. Tasks belonging to a category that occurs earlier in the sequence must be scheduled on the route before a task belonging to a category later in the sequence. 
        /// </summary>
        /// <value>A list of sequences that must be respected when scheduling routes. Tasks belonging to a category that occurs earlier in the sequence must be scheduled on the route before a task belonging to a category later in the sequence. </value>
        [DataMember(Name = "respectedSequences", EmitDefaultValue = false)]
        public List<RespectedTaskSequence> RespectedSequences { get; set; }

        /// <summary>
        /// A list of sequences that are forbidden to be scheduled on a route. Tasks belonging to certain categories must not be scheduled before, or immediately before, tasks belonging to another specific category. 
        /// </summary>
        /// <value>A list of sequences that are forbidden to be scheduled on a route. Tasks belonging to certain categories must not be scheduled before, or immediately before, tasks belonging to another specific category. </value>
        [DataMember(Name = "forbiddenSequences", EmitDefaultValue = false)]
        public List<ForbiddenTaskSequence> ForbiddenSequences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskConstraints {\n");
            sb.Append("  RespectedSequences: ").Append(RespectedSequences).Append("\n");
            sb.Append("  ForbiddenSequences: ").Append(ForbiddenSequences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskConstraints);
        }

        /// <summary>
        /// Returns true if TaskConstraints instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskConstraints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskConstraints input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RespectedSequences == input.RespectedSequences ||
                    this.RespectedSequences != null &&
                    input.RespectedSequences != null &&
                    this.RespectedSequences.SequenceEqual(input.RespectedSequences)
                ) && 
                (
                    this.ForbiddenSequences == input.ForbiddenSequences ||
                    this.ForbiddenSequences != null &&
                    input.ForbiddenSequences != null &&
                    this.ForbiddenSequences.SequenceEqual(input.ForbiddenSequences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RespectedSequences != null)
                {
                    hashCode = (hashCode * 59) + this.RespectedSequences.GetHashCode();
                }
                if (this.ForbiddenSequences != null)
                {
                    hashCode = (hashCode * 59) + this.ForbiddenSequences.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
