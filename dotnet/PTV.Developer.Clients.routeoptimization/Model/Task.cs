/*
 * OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// A description of a task that is scheduled for execution on a route. 
    /// </summary>
    [DataContract(Name = "Task")]
    public partial class Task : IEquatable<Task>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TaskType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Task" /> class.
        /// </summary>
        /// <param name="orderId">The unique identifier of the order whose pickup or delivery is described by this task..</param>
        /// <param name="type">type.</param>
        /// <param name="breaks">A list of breaks that are scheduled to be taken before the execution of the task..</param>
        /// <param name="start">The point in time when the execution of the task is scheduled to start. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). .</param>
        /// <param name="duration">The scheduled duration [s] for the task to be executed. This is the duration between the start and end of the task..</param>
        /// <param name="end">The point in time when the execution of the task is scheduled to end. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). .</param>
        /// <param name="depotId">The unique identifier of the depot in case the task is a pickup or a delivery at a depot..</param>
        public Task(string orderId = default(string), TaskType? type = default(TaskType?), List<Break> breaks = default(List<Break>), DateTimeOffset start = default(DateTimeOffset), int duration = default(int), DateTimeOffset end = default(DateTimeOffset), string depotId = default(string))
        {
            this.OrderId = orderId;
            this.Type = type;
            this.Breaks = breaks;
            this.Start = start;
            this.Duration = duration;
            this.End = end;
            this.DepotId = depotId;
        }

        /// <summary>
        /// The unique identifier of the order whose pickup or delivery is described by this task.
        /// </summary>
        /// <value>The unique identifier of the order whose pickup or delivery is described by this task.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// A list of breaks that are scheduled to be taken before the execution of the task.
        /// </summary>
        /// <value>A list of breaks that are scheduled to be taken before the execution of the task.</value>
        [DataMember(Name = "breaks", EmitDefaultValue = false)]
        public List<Break> Breaks { get; set; }

        /// <summary>
        /// The point in time when the execution of the task is scheduled to start. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). 
        /// </summary>
        /// <value>The point in time when the execution of the task is scheduled to start. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). </value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public DateTimeOffset Start { get; set; }

        /// <summary>
        /// The scheduled duration [s] for the task to be executed. This is the duration between the start and end of the task.
        /// </summary>
        /// <value>The scheduled duration [s] for the task to be executed. This is the duration between the start and end of the task.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public int Duration { get; set; }

        /// <summary>
        /// The point in time when the execution of the task is scheduled to end. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). 
        /// </summary>
        /// <value>The point in time when the execution of the task is scheduled to end. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). </value>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public DateTimeOffset End { get; set; }

        /// <summary>
        /// The unique identifier of the depot in case the task is a pickup or a delivery at a depot.
        /// </summary>
        /// <value>The unique identifier of the depot in case the task is a pickup or a delivery at a depot.</value>
        [DataMember(Name = "depotId", EmitDefaultValue = false)]
        public string DepotId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Task {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Breaks: ").Append(Breaks).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  DepotId: ").Append(DepotId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Task);
        }

        /// <summary>
        /// Returns true if Task instances are equal
        /// </summary>
        /// <param name="input">Instance of Task to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Task input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Breaks == input.Breaks ||
                    this.Breaks != null &&
                    input.Breaks != null &&
                    this.Breaks.SequenceEqual(input.Breaks)
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.DepotId == input.DepotId ||
                    (this.DepotId != null &&
                    this.DepotId.Equals(input.DepotId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Breaks != null)
                {
                    hashCode = (hashCode * 59) + this.Breaks.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                if (this.DepotId != null)
                {
                    hashCode = (hashCode * 59) + this.DepotId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OrderId (string) maxLength
            if (this.OrderId != null && this.OrderId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be less than 36.", new [] { "OrderId" });
            }

            // OrderId (string) minLength
            if (this.OrderId != null && this.OrderId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, length must be greater than 1.", new [] { "OrderId" });
            }

            // OrderId (string) pattern
            Regex regexOrderId = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexOrderId.Match(this.OrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderId, must match a pattern of " + regexOrderId, new [] { "OrderId" });
            }

            // Duration (int) minimum
            if (this.Duration < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.", new [] { "Duration" });
            }

            // DepotId (string) maxLength
            if (this.DepotId != null && this.DepotId.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepotId, length must be less than 36.", new [] { "DepotId" });
            }

            // DepotId (string) minLength
            if (this.DepotId != null && this.DepotId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepotId, length must be greater than 1.", new [] { "DepotId" });
            }

            // DepotId (string) pattern
            Regex regexDepotId = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexDepotId.Match(this.DepotId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepotId, must match a pattern of " + regexDepotId, new [] { "DepotId" });
            }

            yield break;
        }
    }

}
