/*
 * Route Optimization OptiFlow
 *
 * With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.
 *
 * The version of the OpenAPI document: 1.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routeoptimization.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routeoptimization.Model
{
    /// <summary>
    /// Describes a constraint where orders are forbidden to be loaded or unloaded while other orders are loaded in the vehicle.
    /// </summary>
    [DataContract(Name = "LoadingIncompatibilityConstraint")]
    public partial class LoadingIncompatibilityConstraint : IEquatable<LoadingIncompatibilityConstraint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingIncompatibilityConstraint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoadingIncompatibilityConstraint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoadingIncompatibilityConstraint" /> class.
        /// </summary>
        /// <param name="loadedOrderCategory">Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category.  (required).</param>
        /// <param name="forbiddenOrderCategory">Orders belonging to this category cannot be loaded or unloaded while the constraint applies. The constraint will be ignored when no order belongs to this category.  (required).</param>
        /// <param name="vehicleCategory">The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category. .</param>
        public LoadingIncompatibilityConstraint(string loadedOrderCategory = default(string), string forbiddenOrderCategory = default(string), string vehicleCategory = default(string))
        {
            // to ensure "loadedOrderCategory" is required (not null)
            if (loadedOrderCategory == null) {
                throw new ArgumentNullException("loadedOrderCategory is a required property for LoadingIncompatibilityConstraint and cannot be null");
            }
            this.LoadedOrderCategory = loadedOrderCategory;
            // to ensure "forbiddenOrderCategory" is required (not null)
            if (forbiddenOrderCategory == null) {
                throw new ArgumentNullException("forbiddenOrderCategory is a required property for LoadingIncompatibilityConstraint and cannot be null");
            }
            this.ForbiddenOrderCategory = forbiddenOrderCategory;
            this.VehicleCategory = vehicleCategory;
        }

        /// <summary>
        /// Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category. 
        /// </summary>
        /// <value>Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category. </value>
        [DataMember(Name = "loadedOrderCategory", IsRequired = true, EmitDefaultValue = false)]
        public string LoadedOrderCategory { get; set; }

        /// <summary>
        /// Orders belonging to this category cannot be loaded or unloaded while the constraint applies. The constraint will be ignored when no order belongs to this category. 
        /// </summary>
        /// <value>Orders belonging to this category cannot be loaded or unloaded while the constraint applies. The constraint will be ignored when no order belongs to this category. </value>
        [DataMember(Name = "forbiddenOrderCategory", IsRequired = true, EmitDefaultValue = false)]
        public string ForbiddenOrderCategory { get; set; }

        /// <summary>
        /// The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category. 
        /// </summary>
        /// <value>The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category. </value>
        [DataMember(Name = "vehicleCategory", EmitDefaultValue = false)]
        public string VehicleCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoadingIncompatibilityConstraint {\n");
            sb.Append("  LoadedOrderCategory: ").Append(LoadedOrderCategory).Append("\n");
            sb.Append("  ForbiddenOrderCategory: ").Append(ForbiddenOrderCategory).Append("\n");
            sb.Append("  VehicleCategory: ").Append(VehicleCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoadingIncompatibilityConstraint);
        }

        /// <summary>
        /// Returns true if LoadingIncompatibilityConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of LoadingIncompatibilityConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoadingIncompatibilityConstraint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoadedOrderCategory == input.LoadedOrderCategory ||
                    (this.LoadedOrderCategory != null &&
                    this.LoadedOrderCategory.Equals(input.LoadedOrderCategory))
                ) && 
                (
                    this.ForbiddenOrderCategory == input.ForbiddenOrderCategory ||
                    (this.ForbiddenOrderCategory != null &&
                    this.ForbiddenOrderCategory.Equals(input.ForbiddenOrderCategory))
                ) && 
                (
                    this.VehicleCategory == input.VehicleCategory ||
                    (this.VehicleCategory != null &&
                    this.VehicleCategory.Equals(input.VehicleCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoadedOrderCategory != null)
                {
                    hashCode = (hashCode * 59) + this.LoadedOrderCategory.GetHashCode();
                }
                if (this.ForbiddenOrderCategory != null)
                {
                    hashCode = (hashCode * 59) + this.ForbiddenOrderCategory.GetHashCode();
                }
                if (this.VehicleCategory != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleCategory.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // LoadedOrderCategory (string) maxLength
            if (this.LoadedOrderCategory != null && this.LoadedOrderCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoadedOrderCategory, length must be less than 36.", new [] { "LoadedOrderCategory" });
            }

            // LoadedOrderCategory (string) minLength
            if (this.LoadedOrderCategory != null && this.LoadedOrderCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoadedOrderCategory, length must be greater than 1.", new [] { "LoadedOrderCategory" });
            }

            // LoadedOrderCategory (string) pattern
            Regex regexLoadedOrderCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexLoadedOrderCategory.Match(this.LoadedOrderCategory).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoadedOrderCategory, must match a pattern of " + regexLoadedOrderCategory, new [] { "LoadedOrderCategory" });
            }

            // ForbiddenOrderCategory (string) maxLength
            if (this.ForbiddenOrderCategory != null && this.ForbiddenOrderCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForbiddenOrderCategory, length must be less than 36.", new [] { "ForbiddenOrderCategory" });
            }

            // ForbiddenOrderCategory (string) minLength
            if (this.ForbiddenOrderCategory != null && this.ForbiddenOrderCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForbiddenOrderCategory, length must be greater than 1.", new [] { "ForbiddenOrderCategory" });
            }

            // ForbiddenOrderCategory (string) pattern
            Regex regexForbiddenOrderCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexForbiddenOrderCategory.Match(this.ForbiddenOrderCategory).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForbiddenOrderCategory, must match a pattern of " + regexForbiddenOrderCategory, new [] { "ForbiddenOrderCategory" });
            }

            // VehicleCategory (string) maxLength
            if (this.VehicleCategory != null && this.VehicleCategory.Length > 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, length must be less than 36.", new [] { "VehicleCategory" });
            }

            // VehicleCategory (string) minLength
            if (this.VehicleCategory != null && this.VehicleCategory.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, length must be greater than 1.", new [] { "VehicleCategory" });
            }

            // VehicleCategory (string) pattern
            Regex regexVehicleCategory = new Regex(@"^[a-zA-Z0-9_-]{1,36}$", RegexOptions.CultureInvariant);
            if (false == regexVehicleCategory.Match(this.VehicleCategory).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleCategory, must match a pattern of " + regexVehicleCategory, new [] { "VehicleCategory" });
            }

            yield break;
        }
    }

}
